// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PrimusRelayClient methods fetch graphql client error (unknown) should send graphql query 1`] = `[Error: fetch(): GraphQL client error, tried 2 times. ]`;

exports[`PrimusRelayClient methods fetch graphql non-retryable error (400) should send graphql query 1`] = `[Error: fetch(): Received error response from server, tried 1 times. ]`;

exports[`PrimusRelayClient methods fetch graphql retryable error (500) should send graphql query 1`] = `[Error: fetch(): Received error response from server, tried 2 times. ]`;

exports[`PrimusRelayClient methods fetch graphql success (200) should send graphql query 1`] = `
[MockFunction] {
  "calls": Array [
    Array [
      "operationText",
      Object {
        "var1": "foo",
        "var2": "bar",
      },
    ],
  ],
  "results": Array [
    Object {
      "isThrow": false,
      "value": Promise {},
    },
  ],
}
`;

exports[`PrimusRelayClient methods fetch timeout error 1 retry should yield timeout error 1`] = `[Error: fetch(): Request timed out, tried 2 times. ]`;

exports[`PrimusRelayClient methods fetch timeout error should yield timeout error 1`] = `[Error: fetch(): Request timed out, tried 1 times. ]`;

exports[`PrimusRelayClient methods subscribe should subscribe to subscription and retry on error (long error) 1`] = `
Object {
  "onCompleted": [MockFunction],
  "onError": [MockFunction] {
    "calls": Array [
      Array [
        [Error: long message],
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
  "onNext": [MockFunction],
}
`;

exports[`PrimusRelayClient methods subscribe should subscribe to subscription and retry on error (short error) 1`] = `
Object {
  "onCompleted": [MockFunction],
  "onError": [MockFunction] {
    "calls": Array [
      Array [
        [Error],
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
  "onNext": [MockFunction],
}
`;

exports[`PrimusRelayClient methods subscribe subscribed should recieve next 1`] = `
Object {
  "onCompleted": [MockFunction],
  "onError": [MockFunction],
  "onNext": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "data": "nextData",
        },
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
}
`;
